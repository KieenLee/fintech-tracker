using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using fintechtracker_backend.Services;

namespace fintechtracker_backend.Services
{
    public class TelegramBotService : BackgroundService
    {
        private readonly ITelegramBotClient _botClient;
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<TelegramBotService> _logger;

        public TelegramBotService(
            ITelegramBotClient botClient,
            IServiceProvider serviceProvider,
            ILogger<TelegramBotService> logger)
        {
            _botClient = botClient;
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            try
            {
                // X√ìA WEBHOOK TR∆Ø·ªöC KHI D√ôNG LONG POLLING
                _logger.LogInformation("Deleting existing webhook...");
                await _botClient.DeleteWebhookAsync(cancellationToken: stoppingToken);

                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = new[] { UpdateType.Message, UpdateType.CallbackQuery },
                    ThrowPendingUpdates = true // B·ªè qua messages c≈©
                };

                _logger.LogInformation("Starting Telegram bot long polling...");

                await _botClient.ReceiveAsync(
                    HandleUpdateAsync,
                    HandleErrorAsync,
                    receiverOptions,
                    stoppingToken
                );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Fatal error starting Telegram bot");
            }
        }

        private async Task HandleUpdateAsync(
            ITelegramBotClient botClient,
            Update update,
            CancellationToken cancellationToken)
        {
            if (update.Message is not { From: { } from, Text: { } messageText } message)
                return;

            var chatId = message.Chat.Id;
            var telegramUserId = from.Id;

            _logger.LogInformation("Received message from {UserId}: {Text}", telegramUserId, messageText);

            using var scope = _serviceProvider.CreateScope();
            var telegramService = scope.ServiceProvider.GetRequiredService<ITelegramService>();

            string response;

            try
            {
                // Handle commands
                if (messageText.StartsWith("/"))
                {
                    response = await HandleCommandAsync(messageText, telegramUserId, message.From, telegramService);
                }
                else
                {
                    response = await telegramService.ProcessMessageAsync(telegramUserId, messageText);
                }

                await botClient.SendTextMessageAsync(chatId, response, cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing message from {UserId}", telegramUserId);
                await botClient.SendTextMessageAsync(
                    chatId,
                    "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    cancellationToken: cancellationToken
                );
            }
        }

        private async Task<string> HandleCommandAsync(
            string command,
            long telegramUserId,
            User user,
            ITelegramService telegramService)
        {
            var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var cmd = parts[0].ToLower();

            return cmd switch
            {
                "/start" => "üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi FinTech Tracker!\n\n" +
                           "üìù ƒê·ªÉ b·∫Øt ƒë·∫ßu ghi ch√©p thu chi, vui l√≤ng li√™n k·∫øt t√†i kho·∫£n:\n" +
                           "/link <token>\n\n" +
                           "üí° B·∫°n c√≥ th·ªÉ l·∫•y token t·ª´ trang web.",

                "/link" => await HandleLinkCommandAsync(parts, telegramUserId, user, telegramService),

                "/stats" => "üìä T√≠nh nƒÉng th·ªëng k√™ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...",

                "/help" => "üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot**\n\n" +
                          "üîπ /start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n" +
                          "üîπ /link <token> - Li√™n k·∫øt t√†i kho·∫£n\n" +
                          "üîπ /stats - Xem th·ªëng k√™ chi ti√™u\n" +
                          "üîπ /help - Xem h∆∞·ªõng d·∫´n\n\n" +
                          "üí¨ G·ª≠i tin nh·∫Øn ƒë·ªÉ ghi ch√©p thu chi:\n" +
                          "V√≠ d·ª•: 'Mua c√† ph√™ 25000'",

                _ => "‚ùì L·ªánh kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n."
            };
        }

        private async Task<string> HandleLinkCommandAsync(
            string[] parts,
            long telegramUserId,
            User user,
            ITelegramService telegramService)
        {
            if (parts.Length < 2)
            {
                return "‚ùå Vui l√≤ng cung c·∫•p token:\n/link <token>\n\n" +
                       "üí° B·∫°n c√≥ th·ªÉ l·∫•y token t·ª´ trang Settings tr√™n web.";
            }

            var token = parts[1];
            var userId = 1; // Replace with actual validation logic

            var success = await telegramService.RegisterUserAsync(
                telegramUserId,
                userId,
                user.Id,
                user.FirstName ?? "",
                user.LastName ?? "",
                user.Username ?? ""
            );

            return success
                ? "‚úÖ Li√™n k·∫øt t√†i kho·∫£n th√†nh c√¥ng!\n\n" +
                  "üéâ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn ƒë·ªÉ ghi ch√©p thu chi.\n" +
                  "V√≠ d·ª•: 'Mua c√† ph√™ 25000'"
                : "‚ùå Li√™n k·∫øt th·∫•t b·∫°i.\n\n" +
                  "L√Ω do c√≥ th·ªÉ:\n" +
                  "‚Ä¢ Token kh√¥ng h·ª£p l·ªá\n" +
                  "‚Ä¢ T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt\n\n" +
                  "Vui l√≤ng l·∫•y token m·ªõi t·ª´ trang web.";
        }

        private Task HandleErrorAsync(
            ITelegramBotClient botClient,
            Exception exception,
            CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                Telegram.Bot.Exceptions.ApiRequestException apiEx =>
                    $"Telegram API Error: {apiEx.Message}",
                _ => $"Error: {exception.Message}"
            };

            _logger.LogError(exception, "Error in Telegram bot: {ErrorMessage}", errorMessage);
            return Task.CompletedTask;
        }
    }
}